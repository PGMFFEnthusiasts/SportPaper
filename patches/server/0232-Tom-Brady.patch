From 59609a2d73b450fb2a7b45511816014cd5157868 Mon Sep 17 00:00:00 2001
From: Tom Brady <tombrady@localhost>
Date: Sat, 7 Jun 2025 20:18:41 -0600
Subject: [PATCH] Tom Brady


diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index f311373f..a6fb2765 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -48,7 +48,7 @@ public abstract class EntityLiving extends Entity {
     private AttributeMapBase c;
     public CombatTracker combatTracker = new CombatTracker(this);
     public final Map<Integer, MobEffect> effects = Maps.newHashMap();
-    private final ItemStack[] h = new ItemStack[5];
+    public final ItemStack[] h = new ItemStack[5]; // SportPaper - public
     public boolean ar;
     public int as;
     public int at;
@@ -768,7 +768,14 @@ public abstract class EntityLiving extends Entity {
                 boolean flag = true;
 
                 if ((float) this.noDamageTicks > (float) this.maxNoDamageTicks / 2.0F) {
-                    if (f <= this.lastDamage) {
+                    // SportPaper start - Fix snowballs sometimes not firing damage events
+                    EntityDamageSourceIndirect indirect = null;
+                    if (damagesource instanceof EntityDamageSourceIndirect) {
+                        indirect = (EntityDamageSourceIndirect) damagesource;
+                    }
+
+                    if ((damagesource instanceof EntityDamageSourceIndirect && indirect.getProximateDamageSource() instanceof EntitySnowball && !this.d(damagesource, 1)) || f <= this.lastDamage) {
+                    // SportPaper end
                         this.forceExplosionKnockback = true; // CraftBukkit - SPIGOT-949 - for vanilla consistency, cooldown does not prevent explosion knockback
                         return false;
                     }
diff --git a/src/main/java/net/minecraft/server/EntityProjectile.java b/src/main/java/net/minecraft/server/EntityProjectile.java
index 54f8b512..819034d8 100644
--- a/src/main/java/net/minecraft/server/EntityProjectile.java
+++ b/src/main/java/net/minecraft/server/EntityProjectile.java
@@ -31,9 +31,9 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         this.projectileSource = (org.bukkit.entity.LivingEntity) entityliving.getBukkitEntity(); // CraftBukkit
         this.setSize(0.25F, 0.25F);
         this.setPositionRotation(entityliving.locX, entityliving.locY + (double) entityliving.getHeadHeight(), entityliving.locZ, entityliving.yaw, entityliving.pitch);
-        this.locX -= (double) (MathHelper.cos(this.yaw / 180.0F * 3.1415927F) * 0.16F);
+        // this.locX -= (double) (MathHelper.cos(this.yaw / 180.0F * 3.1415927F) * 0.16F); // SportPaper - comment
         this.locY -= 0.10000000149011612D;
-        this.locZ -= (double) (MathHelper.sin(this.yaw / 180.0F * 3.1415927F) * 0.16F);
+        // this.locZ -= (double) (MathHelper.sin(this.yaw / 180.0F * 3.1415927F) * 0.16F); // SportPaper - comment
         this.setPosition(this.locX, this.locY, this.locZ);
         float f = 0.4F;
 
@@ -64,9 +64,9 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         d0 /= (double) f2;
         d1 /= (double) f2;
         d2 /= (double) f2;
-        d0 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
-        d1 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
-        d2 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
+        // d0 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1; // SportPaper - comment
+        // d1 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1; // SportPaper - comment
+        // d2 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1; // SportPaper - comment
         d0 *= (double) f;
         d1 *= (double) f;
         d2 *= (double) f;
@@ -78,6 +78,17 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         this.lastYaw = this.yaw = (float) (MathHelper.b(d0, d2) * 180.0D / 3.1415927410125732D);
         this.lastPitch = this.pitch = (float) (MathHelper.b(d1, (double) f3) * 180.0D / 3.1415927410125732D);
         this.i = 0;
+
+        // SportPaper start - Clamp position and velocity
+        this.locX = (double) Math.round(this.locX * 32.0D) / 32.0D;
+        this.locY = (double) Math.round(this.locY * 32.0D) / 32.0D;
+        this.locZ = (double) Math.round(this.locZ * 32.0D) / 32.0D;
+        this.setPosition(this.locX, this.locY, this.locZ);
+
+        this.motX = (double) ((int) (this.motX * 8000.0D)) / 8000.0D;
+        this.motY = (double) ((int) (this.motY * 8000.0D)) / 8000.0D;
+        this.motZ = (double) ((int) (this.motZ * 8000.0D)) / 8000.0D;
+        // SportPaper end
     }
 
     public void t_() {
@@ -140,7 +151,12 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
                             entity = entity1;
                             d0 = d1;
                         }
+                    // SportPaper start - Check inside hitbox
+                    } else if (axisalignedbb.a(vec3d)) {
+                        entity = entity1;
+                        break;
                     }
+                    // SportPaper end
                 }
             }
 
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index cb72b367..cd2e8184 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -44,7 +44,7 @@ public class EntityTracker {
         } else if (entity instanceof EntityFireball) {
             this.addEntity(entity, 64, 10, false);
         } else if (entity instanceof EntitySnowball) {
-            this.addEntity(entity, 64, 10, true);
+            this.addEntity(entity, 64, 10, false); // SportPaper
         } else if (entity instanceof EntityEnderPearl) {
             this.addEntity(entity, 64, 10, true);
         } else if (entity instanceof EntityEnderSignal) {
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 97fbf0ea..0f9c1e51 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -55,9 +55,11 @@ public class EntityTrackerEntry {
         this.b = i;
         this.c = j;
         this.u = flag;
-        this.xLoc = MathHelper.floor(entity.locX * 32.0D);
-        this.yLoc = MathHelper.floor(entity.locY * 32.0D);
-        this.zLoc = MathHelper.floor(entity.locZ * 32.0D);
+        // SportPaper start - Fix coordinate rounding
+        this.xLoc = (int) Math.round(entity.locX * 32.0D);
+        this.yLoc = (int) Math.round(entity.locY * 32.0D);
+        this.zLoc = (int) Math.round(entity.locZ * 32.0D);
+        // SportPaper end
         this.yRot = MathHelper.d(entity.yaw * 256.0F / 360.0F);
         this.xRot = MathHelper.d(entity.pitch * 256.0F / 360.0F);
         this.i = MathHelper.d(entity.getHeadRotation() * 256.0F / 360.0F);
@@ -118,16 +120,18 @@ public class EntityTrackerEntry {
 
             if (this.tracker.vehicle == null) {
                 ++this.v;
-                i = MathHelper.floor(this.tracker.locX * 32.0D);
-                j = MathHelper.floor(this.tracker.locY * 32.0D);
-                int k = MathHelper.floor(this.tracker.locZ * 32.0D);
+                // SportPaper start - Fix coordinate rounding
+                i = (int) Math.round(this.tracker.locX * 32.0D);
+                j = (int) Math.round(this.tracker.locY * 32.0D);
+                int k = (int) Math.round(this.tracker.locZ * 32.0D);
+                // SportPaper end
                 int l = MathHelper.d(this.tracker.yaw * 256.0F / 360.0F);
                 int i1 = MathHelper.d(this.tracker.pitch * 256.0F / 360.0F);
                 int j1 = i - this.xLoc;
                 int k1 = j - this.yLoc;
                 int l1 = k - this.zLoc;
                 Object object = null;
-                boolean flag = Math.abs(j1) >= 4 || Math.abs(k1) >= 4 || Math.abs(l1) >= 4 || this.m % 60 == 0;
+                boolean flag = Math.abs(j1) >= 1 || Math.abs(k1) >= 1 || Math.abs(l1) >= 1; // SportPaper - Adjust move packet conditions
                 boolean flag1 = Math.abs(l - this.yRot) >= 4 || Math.abs(i1 - this.xRot) >= 4;
 
                 if (this.m > 0 || this.tracker instanceof EntityArrow) { // PaperSpigot - Moved up
@@ -144,7 +148,7 @@ public class EntityTrackerEntry {
                     }
                     // CraftBukkit end
 
-                    if (j1 >= -128 && j1 < 128 && k1 >= -128 && k1 < 128 && l1 >= -128 && l1 < 128 && this.v <= 400 && !this.x && this.y == this.tracker.onGround) {
+                    if (j1 >= -128 && j1 < 128 && k1 >= -128 && k1 < 128 && l1 >= -128 && l1 < 128 && this.v <= 800 && !this.x) { // SportPaper - Adjust move packet conditions
                         if ((!flag || !flag1) && !(this.tracker instanceof EntityArrow)) {
                             if (flag) {
                                 object = new PacketPlayOutEntity.PacketPlayOutRelEntityMove(this.tracker.getId(), (byte) j1, (byte) k1, (byte) l1, this.tracker.onGround);
@@ -182,7 +186,7 @@ public class EntityTrackerEntry {
                     }
                 }
 
-                if (object != null) {
+                if (object != null && !(IProjectile.class.isAssignableFrom(this.tracker.getClass()))) { // SportPaper - Fix desync
                     // PaperSpigot start - ensure fresh viewers get an absolute position on their first update,
                     // since we can't be certain what position they received in the spawn packet.
                     if (object instanceof PacketPlayOutEntityTeleport) {
@@ -231,9 +235,11 @@ public class EntityTrackerEntry {
                     this.xRot = j;
                 }
 
+                // SportPaper start - Fix coordinate rounding
                 this.xLoc = MathHelper.floor(this.tracker.locX * 32.0D);
                 this.yLoc = MathHelper.floor(this.tracker.locY * 32.0D);
                 this.zLoc = MathHelper.floor(this.tracker.locZ * 32.0D);
+                // SportPaper end
                 this.b();
                 this.x = true;
             }
@@ -385,7 +391,7 @@ public class EntityTrackerEntry {
                     this.j = this.tracker.motX;
                     this.k = this.tracker.motY;
                     this.l = this.tracker.motZ;
-                    if (this.u && !(packet instanceof PacketPlayOutSpawnEntityLiving)) {
+                    if ((this.u || this.tracker instanceof EntitySnowball) && !(packet instanceof PacketPlayOutSpawnEntityLiving)) { // SportPaper
                         entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityVelocity(this.tracker.getId(), this.tracker.motX, this.tracker.motY, this.tracker.motZ));
                     }
 
@@ -497,7 +503,7 @@ public class EntityTrackerEntry {
 
             return new PacketPlayOutSpawnEntity(this.tracker, 60, entity != null ? entity.getId() : this.tracker.getId());
         } else if (this.tracker instanceof EntitySnowball) {
-            return new PacketPlayOutSpawnEntity(this.tracker, 61);
+            return new PacketPlayOutSpawnEntity(this.tracker, 61, 1); // SportPaper
         } else if (this.tracker instanceof EntityPotion) {
             return new PacketPlayOutSpawnEntity(this.tracker, 73, ((EntityPotion) this.tracker).getPotionValue());
         } else if (this.tracker instanceof EntityThrownExpBottle) {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index d3c6c3ff..89b97b6c 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1083,6 +1083,24 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             // CraftBukkit end
             this.player.inventory.itemInHandIndex = packetplayinhelditemslot.a();
             this.player.resetIdleTimer();
+
+            // SportPaper start - Update item damage on slot change
+            ItemStack prevItemStack = ((EntityLiving) this.player).h[0];
+            ItemStack itemStack = this.player.inventory.getItemInHand();
+
+            if (prevItemStack != null) {
+                for (AttributeModifier attributemodifier : prevItemStack.B().get("generic.attackDamage")) {
+                    this.player.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).c(attributemodifier);
+                }
+            }
+
+            if (itemStack != null) {
+                for (AttributeModifier attributemodifier : itemStack.B().get("generic.attackDamage")) {
+                    this.player.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).c(attributemodifier);
+                    this.player.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).b(attributemodifier);
+                }
+            }
+            // SportPaper end
         } else {
             PlayerConnection.c.warn(this.player.getName() + " tried to set an invalid carried item");
             this.disconnect("Invalid hotbar selection (Hacking?)"); // CraftBukkit //Spigot "Nope" -> Descriptive reason
-- 
2.39.3 (Apple Git-146)

